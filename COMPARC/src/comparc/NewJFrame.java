/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package comparc;

import comparc.Instruction.Instruction;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

public class NewJFrame extends javax.swing.JFrame {

    int rd, rs, rt, opcode, pc = 0, func = 0;
    boolean proceed = true;
    String rdbin, rsbin, rtbin, opcodebin, temp = "", offsetbin, addressbin, instruction, labeladdress;
    String addbin = "", funcbin, addresshex = "";
    int r0 =0, r1 = 0, r2 = 0, r3 = 0, r4 = 0, r5 = 0, r6 = 0, r7 = 0, r8 = 0, r9 = 0, r10 = 0,
            r11 = 0, r12 = 0, r13 = 0, r14 = 0, r15 = 0, r16 = 0, r17 = 0, r18 = 0, r19 = 0, r20 = 0,
            r21 = 0, r22 = 0, r23 = 0, r24 = 0, r25 = 0, r26 = 0, r27 = 0, r28 = 0, r29 = 0, r30 = 0,
            r31 = 0;
    int hi = 0, lo = 0;

    // regex
    Pattern p = Pattern.compile("[^a-z0-9 ]", Pattern.CASE_INSENSITIVE);
    Pattern immediate = Pattern.compile("[^a-f0-9]", Pattern.CASE_INSENSITIVE);
    Pattern labelcheck = Pattern.compile("^[0-9][a-z0-9]", Pattern.CASE_INSENSITIVE);
    Matcher m;

    Instruction tempinst = new Instruction();
    ArrayList<Instruction> instlist = new ArrayList<Instruction>();
    ArrayList<String> cyclelist = new ArrayList<String>();

    DefaultTableModel opcodemodel;
    DefaultTableModel datasegmentmodel;
    DefaultTableModel codesegmentmodel;
    DefaultTableModel pipelinemodel;
    ArrayList<String> datasegment = new ArrayList<String>();

    ArrayList<String> pipeline = new ArrayList<String>();

    public NewJFrame() {
        initComponents();
        jTextField6.setEditable(false);
        jTextField7.setEditable(false);
        jTextField8.setEditable(false);
        jTextField9.setEditable(false);
        jTextField10.setEditable(false);
        jTextField11.setEditable(false);
        jTextField12.setEditable(false);
        jTextField13.setEditable(false);
        jTextField14.setEditable(false);
        jTextField15.setEditable(false);
        jTextField16.setEditable(false);
        jTextField17.setEditable(false);
        jTextField18.setEditable(false);
        jTextField19.setEditable(false);
        jTextField20.setEditable(false);
        jTextField21.setEditable(false);
        jTextField22.setEditable(false);
        jTextField23.setEditable(false);
        jTextField24.setEditable(false);
        jTextField39.setEditable(false);
        jButton4.setEnabled(false);

        opcodemodel = (DefaultTableModel) jTable3.getModel();
        datasegmentmodel = (DefaultTableModel) jTable1.getModel();
        codesegmentmodel = (DefaultTableModel) jTable2.getModel();
        pipelinemodel = (DefaultTableModel) jTable4.getModel();
        InitializeCS();
        InitializeDS();
        pipeline.add("IF");
        pipeline.add("ID");
        pipeline.add("EX");
        pipeline.add("MEM");
        pipeline.add("WB");

        TableColumn column = null;

        //set size for opcode table
        for (int i = 0; i < 6; i++) {
            column = jTable3.getColumnModel().getColumn(i);
            if (i == 0) {
                column.setPreferredWidth(175);
            } else if (i == 5) {
                column.setPreferredWidth(150);
            } else {
                column.setPreferredWidth(50);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel12 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jComboBox2 = new javax.swing.JComboBox();
        jComboBox3 = new javax.swing.JComboBox();
        jComboBox4 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jComboBox5 = new javax.swing.JComboBox();
        jComboBox6 = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jComboBox7 = new javax.swing.JComboBox();
        jComboBox8 = new javax.swing.JComboBox();
        jTextField1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jComboBox9 = new javax.swing.JComboBox();
        jTextField2 = new javax.swing.JTextField();
        jComboBox10 = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jComboBox11 = new javax.swing.JComboBox();
        jComboBox12 = new javax.swing.JComboBox();
        jTextField3 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jTextField4 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel19 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jPanel11 = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel12 = new javax.swing.JPanel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jTextField9 = new javax.swing.JTextField();
        jTextField10 = new javax.swing.JTextField();
        jTextField11 = new javax.swing.JTextField();
        jTextField12 = new javax.swing.JTextField();
        jTextField13 = new javax.swing.JTextField();
        jTextField14 = new javax.swing.JTextField();
        jTextField15 = new javax.swing.JTextField();
        jTextField16 = new javax.swing.JTextField();
        jTextField17 = new javax.swing.JTextField();
        jTextField18 = new javax.swing.JTextField();
        jTextField19 = new javax.swing.JTextField();
        jTextField20 = new javax.swing.JTextField();
        jTextField21 = new javax.swing.JTextField();
        jTextField22 = new javax.swing.JTextField();
        jTextField23 = new javax.swing.JTextField();
        jTextField24 = new javax.swing.JTextField();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        jLabel56 = new javax.swing.JLabel();
        jLabel57 = new javax.swing.JLabel();
        jTextField25 = new javax.swing.JTextField();
        jTextField26 = new javax.swing.JTextField();
        jTextField27 = new javax.swing.JTextField();
        jTextField28 = new javax.swing.JTextField();
        jTextField29 = new javax.swing.JTextField();
        jTextField30 = new javax.swing.JTextField();
        jTextField31 = new javax.swing.JTextField();
        jTextField32 = new javax.swing.JTextField();
        jTextField33 = new javax.swing.JTextField();
        jTextField34 = new javax.swing.JTextField();
        jTextField35 = new javax.swing.JTextField();
        jTextField36 = new javax.swing.JTextField();
        jTextField37 = new javax.swing.JTextField();
        jTextField38 = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jTextField39 = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel58 = new javax.swing.JLabel();
        jTextField40 = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel18 = new javax.swing.JLabel();
        jTextField41 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jPanel15 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        jLabel12.setText("jLabel12");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1284, 719));
        setPreferredSize(new java.awt.Dimension(1284, 719));

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setPreferredSize(new java.awt.Dimension(500, 175));

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));
        jPanel3.setMinimumSize(new java.awt.Dimension(270, 70));
        jPanel3.setPreferredSize(new java.awt.Dimension(270, 50));
        jPanel3.setLayout(new java.awt.CardLayout());

        jPanel4.setBackground(new java.awt.Color(204, 204, 204));
        jPanel4.setToolTipText("");
        jPanel4.setMaximumSize(new java.awt.Dimension(270, 70));
        jPanel4.setMinimumSize(new java.awt.Dimension(270, 70));
        jPanel4.setPreferredSize(new java.awt.Dimension(270, 50));

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        jComboBox2.setPreferredSize(new java.awt.Dimension(37, 27));

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        jComboBox3.setPreferredSize(new java.awt.Dimension(37, 27));

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        jComboBox4.setPreferredSize(new java.awt.Dimension(37, 27));

        jLabel1.setText("RD");

        jLabel2.setText("RS");

        jLabel3.setText("RT");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox4, 0, 50, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(98, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23))
        );

        jPanel3.add(jPanel4, "card2");

        jPanel5.setBackground(new java.awt.Color(204, 204, 204));
        jPanel5.setMaximumSize(new java.awt.Dimension(270, 70));
        jPanel5.setMinimumSize(new java.awt.Dimension(270, 70));
        jPanel5.setPreferredSize(new java.awt.Dimension(250, 50));

        jComboBox5.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        jComboBox5.setMaximumSize(new java.awt.Dimension(37, 27));
        jComboBox5.setMinimumSize(new java.awt.Dimension(37, 27));
        jComboBox5.setPreferredSize(new java.awt.Dimension(37, 27));

        jComboBox6.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        jComboBox6.setMinimumSize(new java.awt.Dimension(37, 27));
        jComboBox6.setPreferredSize(new java.awt.Dimension(37, 27));

        jLabel9.setText("RS");

        jLabel10.setText("RT");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBox5, 0, 50, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBox6, 0, 50, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 154, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jPanel3.add(jPanel5, "card2");

        jPanel6.setBackground(new java.awt.Color(204, 204, 204));
        jPanel6.setMaximumSize(new java.awt.Dimension(270, 70));
        jPanel6.setMinimumSize(new java.awt.Dimension(270, 70));
        jPanel6.setPreferredSize(new java.awt.Dimension(250, 50));

        jComboBox7.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        jComboBox7.setPreferredSize(new java.awt.Dimension(37, 27));

        jComboBox8.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        jComboBox8.setMinimumSize(new java.awt.Dimension(37, 27));
        jComboBox8.setPreferredSize(new java.awt.Dimension(37, 27));

        jLabel4.setText("Label");

        jLabel11.setText("RS");

        jLabel13.setText("RT");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBox7, 0, 50, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBox8, 0, 50, Short.MAX_VALUE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField1)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE))
                .addContainerGap(78, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel13)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(jComboBox8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jPanel3.add(jPanel6, "card2");

        jPanel7.setBackground(new java.awt.Color(204, 204, 204));
        jPanel7.setMaximumSize(new java.awt.Dimension(270, 70));
        jPanel7.setMinimumSize(new java.awt.Dimension(270, 70));
        jPanel7.setPreferredSize(new java.awt.Dimension(250, 50));

        jComboBox9.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        jComboBox9.setPreferredSize(new java.awt.Dimension(37, 27));

        jComboBox10.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        jLabel5.setText("Offset");

        jLabel14.setText("RD");

        jLabel15.setText("RS");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox9, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField2)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox10, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(88, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(jTextField2)
                    .addComponent(jComboBox9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox10, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jPanel3.add(jPanel7, "card2");

        jPanel8.setBackground(new java.awt.Color(204, 204, 204));
        jPanel8.setMaximumSize(new java.awt.Dimension(270, 70));
        jPanel8.setMinimumSize(new java.awt.Dimension(270, 70));
        jPanel8.setPreferredSize(new java.awt.Dimension(250, 50));

        jComboBox11.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        jComboBox11.setPreferredSize(new java.awt.Dimension(37, 27));

        jComboBox12.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        jLabel6.setText("immediate");

        jLabel16.setText("RD");

        jLabel17.setText("RS");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBox11, 0, 50, Short.MAX_VALUE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBox12, 0, 50, Short.MAX_VALUE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField3)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE))
                .addContainerGap(92, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(jLabel17)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBox12, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBox11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jPanel3.add(jPanel8, "card2");

        jPanel9.setBackground(new java.awt.Color(204, 204, 204));
        jPanel9.setMaximumSize(new java.awt.Dimension(270, 70));
        jPanel9.setMinimumSize(new java.awt.Dimension(270, 70));
        jPanel9.setPreferredSize(new java.awt.Dimension(250, 50));

        jTextField4.setPreferredSize(new java.awt.Dimension(57, 27));

        jLabel7.setText("Label");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(200, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jPanel3.add(jPanel9, "card2");

        jComboBox1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "DSUBU", "DDIV", "AND", "DSRLV", "SLT", "BEQ", "LW", "LWU", "SW", "DADDIU", "ORI", "J" }));
        jComboBox1.setName("inst"); // NOI18N
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel19.setText("Label (optional)");

        jLabel22.setText("Status");

        jLabel23.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(255, 0, 0));

        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(9, 9, 9)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox1)
                            .addComponent(jTextField5)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jComboBox1.getAccessibleContext().setAccessibleName("");

        jPanel10.setBackground(new java.awt.Color(204, 204, 204));

        jButton4.setText("Show Pipeline Map");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable4.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(jTable4);

        jScrollPane8.setViewportView(jScrollPane4);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 727, Short.MAX_VALUE)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));

        jLabel20.setText("Opcode");

        jButton2.setText("Submit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Reset");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Instruction", "Opcode", "IR0..5", "IR6..10", "IR11..15", "IR16..31"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable3.getTableHeader().setReorderingAllowed(false);
        jScrollPane7.setViewportView(jTable3);
        if (jTable3.getColumnModel().getColumnCount() > 0) {
            jTable3.getColumnModel().getColumn(1).setResizable(false);
            jTable3.getColumnModel().getColumn(2).setResizable(false);
            jTable3.getColumnModel().getColumn(3).setResizable(false);
            jTable3.getColumnModel().getColumn(4).setResizable(false);
            jTable3.getColumnModel().getColumn(5).setResizable(false);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel20)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 666, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3))
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel11.setBackground(new java.awt.Color(204, 204, 204));

        jLabel24.setText("Registers");

        jLabel25.setText("R1");

        jLabel26.setText("R2");

        jLabel27.setText("R3");

        jLabel28.setText("R4");

        jLabel29.setText("R5");

        jLabel30.setText("R6");

        jLabel31.setText("R7");

        jLabel32.setText("R8");

        jLabel33.setText("R9");

        jLabel34.setText("R10");

        jLabel35.setText("R11");

        jLabel36.setText("R12");

        jLabel37.setText("R13");

        jLabel38.setText("R14");

        jLabel39.setText("R15");

        jLabel40.setText("R16");

        jLabel41.setText("R17");

        jLabel42.setText("R18");

        jLabel43.setText("R19");

        jTextField6.setText("0000000000000000");
        jTextField6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField6MouseClicked(evt);
            }
        });

        jTextField7.setText("0000000000000000");
        jTextField7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField7MouseClicked(evt);
            }
        });

        jTextField8.setText("0000000000000000");
        jTextField8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField8MouseClicked(evt);
            }
        });

        jTextField9.setText("0000000000000000");
        jTextField9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField9MouseClicked(evt);
            }
        });

        jTextField10.setText("0000000000000000");
        jTextField10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField10MouseClicked(evt);
            }
        });

        jTextField11.setText("0000000000000000");
        jTextField11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField11MouseClicked(evt);
            }
        });

        jTextField12.setText("0000000000000000");
        jTextField12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField12MouseClicked(evt);
            }
        });

        jTextField13.setText("0000000000000000");
        jTextField13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField13MouseClicked(evt);
            }
        });

        jTextField14.setText("0000000000000000");
        jTextField14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField14MouseClicked(evt);
            }
        });

        jTextField15.setText("0000000000000000");
        jTextField15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField15MouseClicked(evt);
            }
        });

        jTextField16.setText("0000000000000000");
        jTextField16.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField16MouseClicked(evt);
            }
        });

        jTextField17.setText("0000000000000000");
        jTextField17.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField17MouseClicked(evt);
            }
        });

        jTextField18.setText("0000000000000000");
        jTextField18.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField18MouseClicked(evt);
            }
        });

        jTextField19.setText("0000000000000000");
        jTextField19.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField19MouseClicked(evt);
            }
        });

        jTextField20.setText("0000000000000000");
        jTextField20.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField20MouseClicked(evt);
            }
        });

        jTextField21.setText("0000000000000000");
        jTextField21.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField21MouseClicked(evt);
            }
        });

        jTextField22.setText("0000000000000000");
        jTextField22.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField22MouseClicked(evt);
            }
        });

        jTextField23.setText("0000000000000000");
        jTextField23.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField23MouseClicked(evt);
            }
        });

        jTextField24.setText("0000000000000000");
        jTextField24.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField24MouseClicked(evt);
            }
        });

        jLabel44.setText("R20");

        jLabel45.setText("R21");

        jLabel46.setText("R22");

        jLabel47.setText("R23");

        jLabel48.setText("R24");

        jLabel49.setText("R25");

        jLabel50.setText("R26");

        jLabel51.setText("R27");

        jLabel52.setText("R28");

        jLabel53.setText("R29");

        jLabel54.setText("R30");

        jLabel55.setText("R31");

        jLabel56.setText("HI");

        jLabel57.setText("LO");

        jTextField25.setText("0000000000000000");
        jTextField25.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField25MouseClicked(evt);
            }
        });

        jTextField26.setText("0000000000000000");
        jTextField26.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField26MouseClicked(evt);
            }
        });

        jTextField27.setText("0000000000000000");
        jTextField27.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField27MouseClicked(evt);
            }
        });

        jTextField28.setText("0000000000000000");
        jTextField28.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField28MouseClicked(evt);
            }
        });

        jTextField29.setText("0000000000000000");
        jTextField29.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField29MouseClicked(evt);
            }
        });

        jTextField30.setText("0000000000000000");
        jTextField30.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField30MouseClicked(evt);
            }
        });

        jTextField31.setText("0000000000000000");
        jTextField31.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField31MouseClicked(evt);
            }
        });

        jTextField32.setText("0000000000000000");
        jTextField32.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField32MouseClicked(evt);
            }
        });

        jTextField33.setText("0000000000000000");
        jTextField33.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField33MouseClicked(evt);
            }
        });

        jTextField34.setText("0000000000000000");
        jTextField34.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField34MouseClicked(evt);
            }
        });

        jTextField35.setText("0000000000000000");
        jTextField35.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField35MouseClicked(evt);
            }
        });

        jTextField36.setText("0000000000000000");
        jTextField36.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField36MouseClicked(evt);
            }
        });

        jTextField37.setText("0000000000000000");
        jTextField37.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField37MouseClicked(evt);
            }
        });

        jTextField38.setText("0000000000000000");
        jTextField38.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField38MouseClicked(evt);
            }
        });

        jLabel21.setText("R0");

        jTextField39.setText("0000000000000000");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel12Layout.createSequentialGroup()
                            .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextField39, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE))
                        .addGroup(jPanel12Layout.createSequentialGroup()
                            .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel38, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                                .addComponent(jLabel37, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel36, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel35, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel34, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel33, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel32, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel29, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel39, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jTextField20, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                                .addComponent(jTextField19)
                                .addComponent(jTextField18)
                                .addComponent(jTextField17)
                                .addComponent(jTextField16)
                                .addComponent(jTextField15)
                                .addComponent(jTextField14)
                                .addComponent(jTextField13)
                                .addComponent(jTextField12)
                                .addComponent(jTextField11)
                                .addComponent(jTextField10)
                                .addComponent(jTextField9)
                                .addComponent(jTextField8)
                                .addComponent(jTextField7)
                                .addComponent(jTextField6))))
                    .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel12Layout.createSequentialGroup()
                            .addComponent(jLabel54, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextField35, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE))
                        .addGroup(jPanel12Layout.createSequentialGroup()
                            .addComponent(jLabel53, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextField34))
                        .addGroup(jPanel12Layout.createSequentialGroup()
                            .addComponent(jLabel52, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextField33))
                        .addGroup(jPanel12Layout.createSequentialGroup()
                            .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel42, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                                .addComponent(jLabel41, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel40, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jTextField23, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                                .addComponent(jTextField22)
                                .addComponent(jTextField21)))
                        .addGroup(jPanel12Layout.createSequentialGroup()
                            .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel56, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel57, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jTextField38, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jTextField37)))
                        .addGroup(jPanel12Layout.createSequentialGroup()
                            .addComponent(jLabel55, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextField36))
                        .addGroup(jPanel12Layout.createSequentialGroup()
                            .addComponent(jLabel51, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextField32))
                        .addGroup(jPanel12Layout.createSequentialGroup()
                            .addComponent(jLabel50, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextField31))
                        .addGroup(jPanel12Layout.createSequentialGroup()
                            .addComponent(jLabel49, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextField30))
                        .addGroup(jPanel12Layout.createSequentialGroup()
                            .addComponent(jLabel48, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextField29))
                        .addGroup(jPanel12Layout.createSequentialGroup()
                            .addComponent(jLabel47, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextField28))
                        .addGroup(jPanel12Layout.createSequentialGroup()
                            .addComponent(jLabel46, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextField27))
                        .addGroup(jPanel12Layout.createSequentialGroup()
                            .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel45, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel44, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel43, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jTextField25)
                                .addComponent(jTextField24, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                                .addComponent(jTextField26)))))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField39, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                .addGap(7, 7, 7)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField7)
                    .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField10)
                    .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField11)
                    .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField12)
                    .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField13)
                    .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField14)
                    .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField15)
                    .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField16)
                    .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField17)
                    .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField18)
                    .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField19)
                    .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField20)
                    .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField21)
                    .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField22, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel41, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel42, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField23))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel43, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField24, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField25)
                    .addComponent(jLabel44, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField26)
                    .addComponent(jLabel45, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField27)
                    .addComponent(jLabel46, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField28)
                    .addComponent(jLabel47, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField29)
                    .addComponent(jLabel48, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField30)
                    .addComponent(jLabel49, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField31)
                    .addComponent(jLabel50, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField32)
                    .addComponent(jLabel51, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField33)
                    .addComponent(jLabel52, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField34)
                    .addComponent(jLabel53, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField35)
                    .addComponent(jLabel54, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel55, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                    .addComponent(jTextField36))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField37, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel56, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField38, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel57, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6))
        );

        jScrollPane2.setViewportView(jPanel12);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel24)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel13.setBackground(new java.awt.Color(204, 204, 204));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Address", "Data"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setCellSelectionEnabled(true);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.setUpdateSelectionOnSort(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
        }

        jLabel58.setText("Data Segment");

        jTextField40.setForeground(new java.awt.Color(153, 153, 153));
        jTextField40.setText("Search");
        jTextField40.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField40FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField40FocusLost(evt);
            }
        });
        jTextField40.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField40KeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addComponent(jLabel58)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
                        .addComponent(jTextField40, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel58)
                    .addComponent(jTextField40, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        jPanel14.setBackground(new java.awt.Color(204, 204, 204));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Address", "Representation"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setResizable(false);
            jTable2.getColumnModel().getColumn(1).setResizable(false);
        }

        jLabel18.setText("Code Segment");

        jTextField41.setForeground(new java.awt.Color(153, 153, 153));
        jTextField41.setText("Search");
        jTextField41.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField41FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField41FocusLost(evt);
            }
        });
        jTextField41.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField41KeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextField41, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jTextField41, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel8.setText("GROUP 8");

        jPanel15.setBackground(new java.awt.Color(204, 204, 204));

        jButton5.setText("Single");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Full");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6)
                        .addGap(0, 353, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private String padZeros(String str, int num) {
        temp = "";
        if (str.length() < num) {
            for (int i = 0; i < num - str.length(); i++) {
                temp = temp + '0';
            }
            str = temp + str;
        }
        return str;
    }

    private String signExtend(String str, int num, String format) {
        temp = "";
        String charStr;
        charStr = Character.toString(str.charAt(0));
        if (format.matches("hex")) {
            if (charStr.matches("8") || charStr.matches("9") || charStr.matches("A")
                    || charStr.matches("B") || charStr.matches("C")
                    || charStr.matches("D") || charStr.matches("E")
                    || charStr.matches("F")) {
                for (int i = 0; i < num - str.length(); i++) {
                    temp = temp + 'F';
                }
                str = temp + str;
            } else {
                for (int i = 0; i < num - str.length(); i++) {
                    temp = temp + '0';
                }
                str = temp + str;
            }
        } else if (format.matches("binary")) {
            if (charStr.matches("1")) {
                for (int i = 0; i < num - str.length(); i++) {
                    temp = temp + '1';
                }
                str = temp + str;
            } else {
                for (int i = 0; i < num - str.length(); i++) {
                    temp = temp + '0';
                }
                str = temp + str;
            }
        }
        return str;
    }

    private void InitializeCS() {
        String addTemp = "", repTemp = "00000000";
        for (int i = 0; i < 2048; i++) {
            addTemp = Integer.toHexString(i * 4);
            addTemp = padZeros(addTemp, 4);
            Object[] obj = {addTemp, repTemp};
            codesegmentmodel.addRow(obj);
        }
        for (int i = 0; i < 2048; i++) {
            datasegment.add("00");
        }
    }

    private void InitializeDS() {
        String addTemp = "", repTemp = "00000000";
        for (int i = 2048; i < 4096; i++) {
            addTemp = Integer.toHexString(i * 4);
            addTemp = padZeros(addTemp, 4);
            Object[] obj = {addTemp, repTemp};
            datasegmentmodel.addRow(obj);
        }
    }

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        instruction = jComboBox1.getSelectedItem().toString();

        //removing panel
        jPanel3.removeAll();
        jPanel3.repaint();
        jPanel3.revalidate();

        if (instruction.matches("DSUBU") || instruction.matches("AND")
                || instruction.matches("DSRLV") || instruction.matches("SLT")) {
            jPanel3.add(jPanel4);
            jPanel3.repaint();
            jPanel3.revalidate();

        } else if (instruction.matches("DDIV")) {
            jPanel3.add(jPanel5);
            jPanel3.repaint();
            jPanel3.revalidate();

        } else if (instruction.matches("BEQ")) {
            jPanel3.add(jPanel6);
            jPanel3.repaint();
            jPanel3.revalidate();

        } else if (instruction.matches("LW") || instruction.matches("LWU") || instruction.matches("SW")) {
            jPanel3.add(jPanel7);
            jPanel3.repaint();
            jPanel3.revalidate();

        } else if (instruction.matches("DADDIU") || instruction.matches("ORI")) {
            jPanel3.add(jPanel8);
            jPanel3.repaint();
            jPanel3.revalidate();

        } else if (instruction.matches("J")) {
            jPanel3.add(jPanel9);
            jPanel3.repaint();
            jPanel3.revalidate();
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void reset() {
        jTextField1.setText("");
        jTextField2.setText("");
        jTextField3.setText("");
        jTextField4.setText("");
        jTextField5.setText("");
        jComboBox1.setSelectedIndex(0);
        jComboBox2.setSelectedIndex(0);
        jComboBox3.setSelectedIndex(0);
        jComboBox4.setSelectedIndex(0);
        jComboBox5.setSelectedIndex(0);
        jComboBox6.setSelectedIndex(0);
        jComboBox7.setSelectedIndex(0);
        jComboBox8.setSelectedIndex(0);
        jComboBox9.setSelectedIndex(0);
        jComboBox10.setSelectedIndex(0);
        jComboBox11.setSelectedIndex(0);
        jComboBox12.setSelectedIndex(0);
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        instruction = jComboBox1.getSelectedItem().toString();
        tempinst = new Instruction();
        labeladdress = jTextField5.getText().toUpperCase();
        m = labelcheck.matcher(labeladdress);
        if (labeladdress.matches("")) {
            labeladdress = "NO LABEL";
            proceed = true;
        } else if (labeladdress.matches("DSUBU") || labeladdress.matches("AND") || labeladdress.matches("DSRLV")
                || labeladdress.matches("SLT") || labeladdress.matches("DDIV") || labeladdress.matches("BEQ")
                || labeladdress.matches("LW") || labeladdress.matches("LWU") || labeladdress.matches("SW")
                || labeladdress.matches("DADDIU") || labeladdress.matches("ORI") || labeladdress.matches("J")) {
            proceed = false;
        } else {
            if (m.find()) { //check for special characters
                proceed = false;
            } else {
                proceed = true;

                for (int i = 0; i < instlist.size(); i++) { //check if label exists
                    if (instlist.get(i).getLabel().matches(labeladdress)) {
                        proceed = false;
                    }
                }
            }
        }

        if (proceed) {
            if (instruction.matches("DSUBU") || instruction.matches("DDIV") || instruction.matches("AND")
                    || instruction.matches("DSRLV") || instruction.matches("SLT")) {

                //increment pc by 4
                pc = pc + 4;
                tempinst.setPc(padZeros(Integer.toHexString(pc), 16));

                if (instruction.matches("DDIV")) {
                    rs = jComboBox5.getSelectedIndex();
                    rt = jComboBox6.getSelectedIndex();
                } else {
                    rd = jComboBox4.getSelectedIndex();
                    rs = jComboBox2.getSelectedIndex();
                    rt = jComboBox3.getSelectedIndex();
                }

                //opcode binary
                opcodebin = "000000";

                //rs binary
                rsbin = Integer.toBinaryString(rs);
                rsbin = padZeros(rsbin, 5);

                //rt binary
                temp = "";
                rtbin = Integer.toBinaryString(rt);
                rtbin = padZeros(rtbin, 5);

                //rd binary
                if (instruction.matches("DDIV")) {
                    rdbin = "00000";
                } else {
                    rdbin = Integer.toBinaryString(rd);
                    rdbin = padZeros(rdbin, 5);
                }

                //additional 5 bits
                addbin = "00000";

                //function
                if (instruction.matches("DSUBU")) {
                    func = 47;
                } else if (instruction.matches("DDIV")) {
                    func = 30;
                } else if (instruction.matches("AND")) {
                    func = 36;
                } else if (instruction.matches("DSRLV")) {
                    func = 22;
                } else if (instruction.matches("SLT")) {
                    func = 42;
                }
                funcbin = Integer.toBinaryString(func);
                funcbin = padZeros(funcbin, 6);

                //address in binary
                addressbin = opcodebin + rsbin + rtbin + rdbin + addbin + funcbin;

                //convert to hex
                addresshex = new BigInteger(addressbin, 2).toString(16);
                addresshex = padZeros(addresshex, 8);

                tempinst.setOpcode(addresshex);
                tempinst.setLabel(labeladdress);

                if (instruction.matches("DDIV")) {
                    tempinst.setInst(instruction + " R" + rs + ", R" + rt);
                    //store dependency
                    if (rs == 0 && rt == 0) {
                        tempinst.setDependency("none");
                    } else if (rs == 0) {
                        tempinst.setDependency('R' + Integer.toString(rt));
                    } else if (rt == 0) {
                        tempinst.setDependency('R' + Integer.toString(rs));
                    } else {
                        tempinst.setDependency('R' + Integer.toString(rs) + ", R" + Integer.toString(rt));
                    }
                    tempinst.setAnswer("none");
                    if (labeladdress.matches("NO LABEL")) {
                        Object[] obj = {instruction + " R" + rs + ", R" + rt, ' '};
                        opcodemodel.addRow(obj);
                    } else {
                        Object[] obj = {labeladdress + ": " + instruction + " R" + rs + ", R" + rt, ' '};
                        opcodemodel.addRow(obj);
                    }
                } else {
                    tempinst.setInst(instruction + " R" + rd + ", R" + rs + ", R" + rt);
                    //store dependency
                    if (rs == 0 && rt == 0) {
                        tempinst.setDependency("none");
                    } else if (rs == 0) {
                        tempinst.setDependency('R' + Integer.toString(rt));
                    } else if (rt == 0) {
                        tempinst.setDependency('R' + Integer.toString(rs));
                    } else {
                        tempinst.setDependency('R' + Integer.toString(rs) + ", R" + Integer.toString(rt));
                    }
                    tempinst.setAnswer('R' + Integer.toString(rd));
                    if (labeladdress.matches("NO LABEL")) {
                        Object[] obj = {instruction + " R" + rd + ", R" + rs + ", R" + rt, ' '};
                        opcodemodel.addRow(obj);
                    } else {
                        Object[] obj = {labeladdress + ": " + instruction + " R" + rd + ", R" + rs + ", R" + rt, ' '};
                        opcodemodel.addRow(obj);
                    }
                }
                if (instlist.add(tempinst)) {
                    jLabel23.setText("Successfully added!");
                }
            } else if (instruction.matches("BEQ")) {
                m = p.matcher(jTextField1.getText());
                if (jTextField1.getText().matches("") || m.find()) { //special characters or null
                    jLabel23.setText("Invalid Label");
                } else if (jTextField1.getText().matches("DSUBU") || jTextField1.getText().matches("AND") || jTextField1.getText().matches("DSRLV")
                        || jTextField1.getText().matches("SLT") || jTextField1.getText().matches("DDIV") || jTextField1.getText().matches("BEQ")
                        || jTextField1.getText().matches("LW") || jTextField1.getText().matches("LWU") || jTextField1.getText().matches("SW")
                        || jTextField1.getText().matches("DADDIU") || jTextField1.getText().matches("ORI") || jTextField1.getText().matches("J")) {
                    jLabel23.setText("Invalid Label");
                } else {
                    //increment pc by 4
                    pc = pc + 4;
                    tempinst.setPc(padZeros(Integer.toHexString(pc), 16));

                    rs = jComboBox7.getSelectedIndex();
                    rt = jComboBox8.getSelectedIndex();

                    opcodebin = "000100";

                    //rs binary
                    rsbin = Integer.toBinaryString(rs);
                    rsbin = padZeros(rsbin, 5);

                    //rt binary
                    rtbin = Integer.toBinaryString(rt);
                    rtbin = padZeros(rtbin, 5);

                    addressbin = opcodebin + rsbin + rtbin;

                    tempinst.setInst(instruction + " R" + jComboBox7.getSelectedItem() + ", R" + jComboBox8.getSelectedItem() + ", " + jTextField1.getText().toUpperCase());
                    if (labeladdress.matches("NO LABEL")) {
                        Object[] obj = {instruction + " R" + jComboBox7.getSelectedItem() + ", R" + jComboBox8.getSelectedItem() + ", " + jTextField1.getText().toUpperCase(), ' '};
                        opcodemodel.addRow(obj);
                    } else {
                        Object[] obj = {labeladdress + ": " + instruction + " R" + jComboBox7.getSelectedItem() + ", R" + jComboBox8.getSelectedItem() + ", " + jTextField1.getText().toUpperCase(), ' '};
                        opcodemodel.addRow(obj);
                    }
                    if (rs != 0 && rt != 0) {
                        tempinst.setDependency('R' + Integer.toString(rs) + ", R" + Integer.toString(rt));
                    } else if (rs != 0) {
                        tempinst.setDependency('R' + Integer.toString(rs));
                    } else if (rt != 0) {
                        tempinst.setDependency('R' + Integer.toString(rt));
                    } else {
                        tempinst.setDependency("none");
                    }

                    tempinst.setAnswer("none");
                    tempinst.setOpcode(addressbin);
                    tempinst.setLabel(labeladdress);
                    if (instlist.add(tempinst)) {
                        jLabel23.setText("Successfully added!");
                    }
                }

            } else if (instruction.matches("LW") || instruction.matches("LWU") || instruction.matches("SW")) {
                m = immediate.matcher(jTextField2.getText());
                if (jTextField2.getText().matches("") || jTextField2.getText().length() > 4 || m.find()) {
                    jLabel23.setText("Invalid Offset");
                } else {
                    rd = jComboBox9.getSelectedIndex();
                    rs = jComboBox10.getSelectedIndex();

                    //increment pc by 4
                    pc = pc + 4;
                    tempinst.setPc(padZeros(Integer.toHexString(pc), 16));

                    //opcode binary
                    if (instruction.matches("LW")) {
                        opcode = 35;
                    } else if (instruction.matches("LWU")) {
                        opcode = 39;
                    } else if (instruction.matches("SW")) {
                        opcode = 43;
                    }

                    opcodebin = Integer.toBinaryString(opcode);
                    opcodebin = padZeros(opcodebin, 6);

                    //rd binary
                    rdbin = Integer.toBinaryString(rd);
                    rdbin = padZeros(rdbin, 5);

                    //rs binary
                    rsbin = Integer.toBinaryString(rs);
                    rsbin = padZeros(rsbin, 5);

                    offsetbin = Integer.toBinaryString(Integer.parseInt(jTextField2.getText(), 16));
                    offsetbin = padZeros(offsetbin, 16);

                    //address in binary
                    addressbin = opcodebin + rsbin + rdbin + offsetbin;

                    addresshex = new BigInteger(addressbin, 2).toString(16);
                    addresshex = padZeros(addresshex, 8);

                    tempinst.setOpcode(addresshex);

                    tempinst.setInst(instruction + " R" + jComboBox9.getSelectedItem() + ", " + jTextField2.getText() + "(R" + jComboBox10.getSelectedItem() + ")");
                    tempinst.setLabel(labeladdress);

                    if (labeladdress.matches("NO LABEL")) {
                        Object[] obj = {instruction + " R" + jComboBox9.getSelectedItem() + ", " + jTextField2.getText() + "(R" + jComboBox10.getSelectedItem() + ")", ' '};
                        opcodemodel.addRow(obj);
                    } else {
                        Object[] obj = {labeladdress + ": " + instruction + " R" + jComboBox9.getSelectedItem() + ", " + jTextField2.getText() + "(R" + jComboBox10.getSelectedItem() + ")", ' '};
                        opcodemodel.addRow(obj);
                    }

                    if (instruction.matches("SW")) {
                        //store dependency
                        if (rd == 0 && rs == 0) {
                            tempinst.setDependency("none");
                        } else if (rd == 0) {
                            tempinst.setDependency('R' + Integer.toString(rs));
                        } else if (rs == 0) {
                            tempinst.setDependency('R' + Integer.toString(rd));
                        } else {
                            tempinst.setDependency('R' + Integer.toString(rd) + ", R" + Integer.toString(rs));
                        }
                        tempinst.setAnswer("none");
                    } else {
                        if (rs != 0) {
                            tempinst.setDependency('R' + Integer.toString(rs));
                        } else {
                            tempinst.setDependency("none");
                        }
                        tempinst.setAnswer('R' + Integer.toString(rd));
                    }
                    if (instlist.add(tempinst)) {
                        jLabel23.setText("Successfully added!");
                    }
                }

            } else if (instruction.matches("DADDIU") || instruction.matches("ORI")) {
                m = immediate.matcher(jTextField3.getText());
                if (jTextField3.getText().matches("") || jTextField3.getText().length() > 4 || m.find()) {
                    jLabel23.setText("Invalid Offset.");
                } else {
                    rd = jComboBox11.getSelectedIndex();
                    rs = jComboBox12.getSelectedIndex();

                    //increment pc by 4
                    pc = pc + 4;
                    tempinst.setPc(padZeros(Integer.toHexString(pc), 16));

                    if (instruction.matches("DADDIU")) {
                        opcode = 25;
                    } else if (instruction.matches("ORI")) {
                        opcode = 13;
                    }

                    opcodebin = Integer.toBinaryString(opcode);
                    opcodebin = padZeros(opcodebin, 6);

                    //rs binary
                    rsbin = Integer.toBinaryString(rs);
                    rsbin = padZeros(rsbin, 5);

                    //rd binary
                    rdbin = Integer.toBinaryString(rd);
                    rdbin = padZeros(rdbin, 5);

                    offsetbin = Integer.toBinaryString(Integer.parseInt(jTextField3.getText(), 16));
                    offsetbin = padZeros(offsetbin, 16);

                    //address in binary
                    addressbin = opcodebin + rsbin + rdbin + offsetbin;

                    //address in hex
                    addresshex = new BigInteger(addressbin, 2).toString(16);
                    addresshex = padZeros(addresshex, 8);

                    tempinst.setInst(instruction + " R" + jComboBox11.getSelectedItem() + ", R" + jComboBox12.getSelectedItem() + ", #" + jTextField3.getText());

                    if (labeladdress.matches("NO LABEL")) {
                        Object[] obj = {instruction + " R" + jComboBox11.getSelectedItem() + ", R" + jComboBox12.getSelectedItem() + ", #" + jTextField3.getText(), ' '};
                        opcodemodel.addRow(obj);
                    } else {
                        Object[] obj = {labeladdress + ": " + instruction + " R" + jComboBox11.getSelectedItem() + ", R" + jComboBox12.getSelectedItem() + ", #" + jTextField3.getText(), ' '};
                        opcodemodel.addRow(obj);
                    }

                    //store dependency
                    if (rs == 0) {
                        tempinst.setDependency("none");
                    } else {
                        tempinst.setDependency('R' + Integer.toString(rs));
                    }
                    tempinst.setAnswer('R' + Integer.toString(rd));
                    tempinst.setOpcode(addresshex);
                    tempinst.setLabel(labeladdress);
                    
                    if (instlist.add(tempinst)) {
                        jLabel23.setText("Successfully added!");
                    }
                }

            } else if (instruction.matches("J")) {
                m = p.matcher(jTextField4.getText());
                if (jTextField4.getText().matches("") || m.find()) { //special characters
                    jLabel23.setText("Invalid Offset");
                } else {

                    //increment pc by 4
                    pc = pc + 4;
                    tempinst.setPc(padZeros(Integer.toHexString(pc), 16));

                    opcodebin = "000010";
                    tempinst.setInst(instruction + " " + jTextField4.getText().toUpperCase());

                    if (labeladdress.matches("NO LABEL")) {
                        Object[] obj = {instruction + " " + jTextField4.getText().toUpperCase(), ' '};
                        opcodemodel.addRow(obj);
                    } else {
                        Object[] obj = {labeladdress + ": " + instruction + " " + jTextField4.getText().toUpperCase(), ' '};
                        opcodemodel.addRow(obj);
                    }
                    tempinst.setAnswer("none");
                    tempinst.setDependency("none");
                    tempinst.setOpcode(opcodebin);
                    tempinst.setLabel(labeladdress);
                    if (instlist.add(tempinst)) {
                        jLabel23.setText("Successfully Added!");
                    }
                }
            }
        } else {
            jLabel23.setText("Invalid label");
        }

        reset();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        opcodemodel.getDataVector().removeAllElements();
        opcodemodel.fireTableDataChanged();
        jButton1.setEnabled(false);
        jButton2.setEnabled(false);
        jButton4.setEnabled(true);
        boolean proceed = true;
        int i, j, offset;
        String label;
        for (i = 0; i < instlist.size(); i++) {
            if (instlist.get(i).getInst().contains("BEQ")) {
                label = instlist.get(i).getInst().substring(instlist.get(i).getInst().lastIndexOf(", ") + 2);
                for (j = 0; j < instlist.size(); j++) {
                    if (instlist.get(j).getLabel().matches(label)) {
                        break;
                    }
                }
                if (j == instlist.size()) { //label not found
                    proceed = false;
                } else { //label above
                    offset = j - (i + 1);
                    offsetbin = Integer.toBinaryString(offset);
                    offsetbin = signExtend(offsetbin, 64, "binary");

                    offsetbin = instlist.get(i).getOpcode() + offsetbin;

                    addresshex = new BigInteger(offsetbin, 2).toString(16);
                    addresshex = padZeros(addresshex, 8);
                    instlist.get(i).setOpcode(addresshex);
                }
            } else if (instlist.get(i).getInst().contains("J")) {
                int ctr = 0;
                label = instlist.get(i).getLabel().substring(2);
                for (j = 0; j < instlist.size(); j++) {
                    if (instlist.get(j).getLabel().matches(label)) {
                        break;
                    }
                }
                if (j == instlist.size()) {
                    proceed = false;
                } else {
                    ctr = ((Integer.parseInt(instlist.get(j).getPc(), 16)) - 4) / 4;
                    offsetbin = Integer.toBinaryString(ctr);
                    offsetbin = padZeros(offsetbin, 26);
                    offsetbin = instlist.get(i).getOpcode() + offsetbin;

                    addresshex = new BigInteger(offsetbin, 2).toString(16);
                    addresshex = padZeros(addresshex, 8);
                    instlist.get(i).setOpcode(addresshex);
                }
            }
        }

        if (proceed) {
            int intvalue = 0;
            String binvalue = "";
            for (i = 0; i < instlist.size(); i++) {
                intvalue = Integer.parseInt(instlist.get(i).getOpcode(), 16);
                binvalue = Integer.toBinaryString(intvalue);
                binvalue = padZeros(binvalue, 32);
                if (instlist.get(i).getLabel().matches("NO LABEL")) {
                    Object[] obj = {instlist.get(i).getInst(), instlist.get(i).getOpcode(), binvalue.substring(0, 6), binvalue.substring(6, 11), binvalue.substring(11, 16), binvalue.substring(16, 32)};
                    opcodemodel.addRow(obj);
                } else {
                    Object[] obj = {instlist.get(i).getLabel() + ": " + instlist.get(i).getInst(), instlist.get(i).getOpcode(), binvalue.substring(0, 6), binvalue.substring(6, 11), binvalue.substring(11, 16), binvalue.substring(16, 32)};
                    opcodemodel.addRow(obj);
                }
            }
        } else {
            jLabel23.setText("Error");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        reset();
        jButton1.setEnabled(true);
        jButton2.setEnabled(true);
        jButton4.setEnabled(false);
        instlist.clear();
        cyclelist.clear();
        opcodemodel.getDataVector().removeAllElements();
        opcodemodel.fireTableDataChanged();
        InitializeCS();
        InitializeDS();
        //SET REGISTER TO ZERO
        //REMOVE PIPELINE MAP
        //REMOVE EXECUTION
    }//GEN-LAST:event_jButton3ActionPerformed

    private void addCycle(int instnum, int at) {
        for (int i = 0; i < pipeline.size(); i++) {
            if (at < cyclelist.size()) {
                cyclelist.set(at, cyclelist.get(at) + ", Inst" + Integer.toString(instnum) + " " + pipeline.get(i));
            } else {
                cyclelist.add("Inst" + Integer.toString(instnum) + " " + pipeline.get(i));
            }
            at++;
        }
    }

    private void addIf(int instnum, int at) {
        cyclelist.set(at, cyclelist.get(at) + ", Inst" + Integer.toString(instnum) + " IF");
    }

    private void addStall(int instnum, int at, int range) {
        for (int i = 0; i < range + 1; i++) {
            if (at < cyclelist.size()) {
                cyclelist.set(at, cyclelist.get(at) + ", Inst" + Integer.toString(instnum) + " *");
            } else {
                cyclelist.add("Inst" + Integer.toString(instnum) + " *");
            }
            at++;
        }
    }

    private void addCont(int instnum, int at) {
        for (int i = 1; i < pipeline.size(); i++) {
            if (at < cyclelist.size()) {
                cyclelist.set(at, cyclelist.get(at) + ", Inst" + Integer.toString(instnum) + " " + pipeline.get(i));
            } else {
                cyclelist.add("Inst" + Integer.toString(instnum) + " " + pipeline.get(i));
            }
            at++;
        }
    }

    private void setRegister(int reg, int value) {
        switch (reg) {
            case 0: r0 = 0;
            case 1: 
                {   r1 = value;
                    temp = Integer.toHexString(r1);
                    temp = padZeros(temp, 16).toUpperCase();
                    jTextField6.setText(temp);
                    break;
                }
            case 2: 
                {   r2 = value;
                    temp = Integer.toHexString(r2);
                    temp = padZeros(temp, 16).toUpperCase();
                    jTextField7.setText(temp);
                    break;
                }
            case 3: 
                {   r3 = value;
                    temp = Integer.toHexString(r3);
                    temp = padZeros(temp, 16).toUpperCase();
                    jTextField8.setText(temp);
                    break;
                }
            case 4: 
                {   r4 = value;
                    temp = Integer.toHexString(r4);
                    temp = padZeros(temp, 16).toUpperCase();
                    jTextField9.setText(temp);
                    break;
                }
            case 5: 
                {   r5 = value;
                    temp = Integer.toHexString(r5);
                    temp = padZeros(temp, 16).toUpperCase();
                    jTextField10.setText(temp);
                    break;
                }
            case 6: 
                {   r6 = value;
                    temp = Integer.toHexString(r6);
                    temp = padZeros(temp, 16).toUpperCase();
                    jTextField11.setText(temp);
                    break;
                }
            case 7: 
                {   r7 = value;
                    temp = Integer.toHexString(r7);
                    temp = padZeros(temp, 16).toUpperCase();
                    jTextField12.setText(temp);
                    break;
                }
            case 8: 
                {   r8 = value;
                    temp = Integer.toHexString(r8);
                    temp = padZeros(temp, 16).toUpperCase();
                    jTextField13.setText(temp);
                    break;
                }
            case 9: 
                {   r9 = value;
                    temp = Integer.toHexString(r9);
                    temp = padZeros(temp, 16).toUpperCase();
                    jTextField14.setText(temp);
                    break;
                }
            case 10: 
                {   r10 = value;
                    temp = Integer.toHexString(r10);
                    temp = padZeros(temp, 16).toUpperCase();
                    jTextField15.setText(temp);
                    break;
                }
            case 11: 
                {   r11 = value;
                    temp = Integer.toHexString(r11);
                    temp = padZeros(temp, 16).toUpperCase();
                    jTextField16.setText(temp);
                    break;
                }
            case 12: 
                {   r12 = value;
                    temp = Integer.toHexString(r12);
                    temp = padZeros(temp, 16).toUpperCase();
                    jTextField17.setText(temp);
                    break;
                }
            case 13: 
                {   r13 = value;
                    temp = Integer.toHexString(r13);
                    temp = padZeros(temp, 16).toUpperCase();
                    jTextField18.setText(temp);
                    break;
                }
            case 14: 
                {   r14 = value;
                    temp = Integer.toHexString(r14);
                    temp = padZeros(temp, 16).toUpperCase();
                    jTextField19.setText(temp);
                    break;
                }
            case 15: 
                {   r15 = value;
                    temp = Integer.toHexString(r15);
                    temp = padZeros(temp, 16).toUpperCase();
                    jTextField20.setText(temp);
                    break;
                }
            case 16: 
                {   r16 = value;
                    temp = Integer.toHexString(r16);
                    temp = padZeros(temp, 16).toUpperCase();
                    jTextField21.setText(temp);
                    break;
                }
            case 17: 
                {   r17 = value;
                    temp = Integer.toHexString(r17);
                    temp = padZeros(temp, 16).toUpperCase();
                    jTextField22.setText(temp);
                    break;
                }
            case 18: 
                {   r18 = value;
                    temp = Integer.toHexString(r18);
                    temp = padZeros(temp, 16).toUpperCase();
                    jTextField23.setText(temp);
                    break;
                }
            case 19: 
                {   r19 = value;
                    temp = Integer.toHexString(r19);
                    temp = padZeros(temp, 16).toUpperCase();
                    jTextField24.setText(temp);
                    break;
                }
            case 20: 
                {   r20 = value;
                    temp = Integer.toHexString(r20);
                    temp = padZeros(temp, 16).toUpperCase();
                    jTextField25.setText(temp);
                    break;
                }
            case 21: 
                {   r21 = value;
                    temp = Integer.toHexString(r21);
                    temp = padZeros(temp, 16).toUpperCase();
                    jTextField26.setText(temp);
                    break;
                }
            case 22: 
                {   r22 = value;
                    temp = Integer.toHexString(r22);
                    temp = padZeros(temp, 16).toUpperCase();
                    jTextField27.setText(temp);
                    break;
                }
            case 23: 
                {   r23 = value;
                    temp = Integer.toHexString(r23);
                    temp = padZeros(temp, 16).toUpperCase();
                    jTextField28.setText(temp);
                    break;
                }
            case 24: 
                {   r24 = value;
                    temp = Integer.toHexString(r24);
                    temp = padZeros(temp, 16).toUpperCase();
                    jTextField29.setText(temp);
                    break;
                }
            case 25: 
                {   r25 = value;
                    temp = Integer.toHexString(r25);
                    temp = padZeros(temp, 16).toUpperCase();
                    jTextField30.setText(temp);
                    break;
                }
            case 26: 
                {   r26 = value;
                    temp = Integer.toHexString(r26);
                    temp = padZeros(temp, 16).toUpperCase();
                    jTextField31.setText(temp);
                    break;
                }
            case 27: 
                {   r27 = value;
                    temp = Integer.toHexString(r27);
                    temp = padZeros(temp, 16).toUpperCase();
                    jTextField32.setText(temp);
                    break;
                }
            case 28: 
                {   r28 = value;
                    temp = Integer.toHexString(r28);
                    temp = padZeros(temp, 16).toUpperCase();
                    jTextField33.setText(temp);
                    break;
                }
            case 29: 
                {   r29 = value;
                    temp = Integer.toHexString(r29);
                    temp = padZeros(temp, 16).toUpperCase();
                    jTextField34.setText(temp);
                    break;
                }
            case 30:
                {   r30 = value;
                    temp = Integer.toHexString(r30);
                    temp = padZeros(temp, 16).toUpperCase();
                    jTextField35.setText(temp);
                    break;
                }
            case 31: 
                {   r31 = value;
                    temp = Integer.toHexString(r31);
                    temp = padZeros(temp, 16).toUpperCase();
                    jTextField36.setText(temp);
                    break;
                }
        }
    }

    private int checkRegister(int reg) {
        switch (reg) {
            case 0: return 0;
            case 1: return r1;
            case 2: return r2;
            case 3: return r3;
            case 4: return r4;
            case 5: return r5;
            case 6: return r6;
            case 7: return r7;
            case 8: return r8;
            case 9: return r9;
            case 10: return r10;
            case 11: return r11;
            case 12: return r12;
            case 13: return r13;
            case 14: return r14;
            case 15: return r15;
            case 16: return r16;
            case 17: return r17;
            case 18: return r18;
            case 19: return r19;
            case 20: return r20;
            case 21: return r21;
            case 22: return r22;
            case 23: return r23;
            case 24: return r24;
            case 25: return r25;
            case 26: return r26;
            case 27: return r27;
            case 28: return r28;
            case 29: return r29;
            case 30: return r30;
            case 31: return r31;
            default: return 0;
        }
    }

    public void addIFtoWB(int index) {
        String IR = "", NPC = "", PC = "";
        String A = "", B = "", IMM = "", ALUOUTPUT = "", LMD = "", MEMALU = "", REG = "";
        String charA, charB;
        int COND = 0;
        int tempint, intvalue;
        String tempstr, tempA, tempB;

        //IF
        IR = instlist.get(index).getOpcode();
        if (index != 0) {
            if (instlist.get(index - 1).getInst().contains("J")) {
                tempstr = instlist.get(index - 1).getOpcode().substring(4);
                tempint = Integer.parseInt(tempstr, 16) * 4;
                NPC = Integer.toHexString(tempint);
                NPC = padZeros(NPC, 16);
                PC = NPC;
            } else if (instlist.get(index - 1).getEX().getCOND() == 1 && instlist.get(index - 1).getInst().contains("BEQ")) {
                tempstr = instlist.get(index - 1).getOpcode().substring(4);
                tempint = Integer.parseInt(tempstr, 16) * 4 + Integer.parseInt(instlist.get(index).getPc(), 16);
                NPC = Integer.toHexString(tempint);
                NPC = padZeros(NPC, 16);
                PC = NPC;
            } else {
                NPC = instlist.get(index).getPc();
                PC = instlist.get(index).getPc();
            }
        } else {
            NPC = instlist.get(index).getPc();
            PC = instlist.get(index).getPc();
        }
        instlist.get(index).setIF(IR, NPC, PC);

        //ID
        intvalue = Integer.parseInt(instlist.get(index).getOpcode(), 16);
        tempstr = Integer.toBinaryString(intvalue);
        tempstr = padZeros(tempstr, 32);
        tempint = checkRegister(Integer.parseInt(tempstr.substring(6, 11), 2));
        A = Integer.toHexString(tempint);
        A = padZeros(A, 16);

        tempint = checkRegister(Integer.parseInt(tempstr.substring(11, 16), 2));
        B = Integer.toHexString(tempint);
        B = padZeros(B, 16);

        tempint = Integer.parseInt(tempstr.substring(16, 32), 2);
        IMM = Integer.toHexString(tempint);
        IMM = padZeros(IMM, 16);

        instlist.get(index).setID(A, B, IMM, IR);

        //EX
        if (instlist.get(index).getInst().contains("DSUBU")) {
            intvalue = Integer.parseInt(instlist.get(index).getID().getA(), 16) - Integer.parseInt(instlist.get(index).getID().getB(), 16);

            ALUOUTPUT = Integer.toHexString(intvalue);
            ALUOUTPUT = signExtend(ALUOUTPUT, 16, "hex");
            COND = 0;
        } else if (instlist.get(index).getInst().contains("DDIV")) {
            lo = Integer.parseInt(instlist.get(index).getID().getA(), 16) / Integer.parseInt(instlist.get(index).getID().getB());
            hi = Integer.parseInt(instlist.get(index).getID().getA(), 16) % Integer.parseInt(instlist.get(index).getID().getB());
            
            ALUOUTPUT = Integer.toHexString(lo);
            ALUOUTPUT = padZeros(ALUOUTPUT, 16);
            COND = 0;
        } else if (instlist.get(index).getInst().contains("AND")) {
            tempA = Integer.toBinaryString(Integer.parseInt(A, 16));
            tempB = Integer.toBinaryString(Integer.parseInt(B, 16));
            tempA = padZeros(tempA, 64);
            tempB = padZeros(tempA, 64);

            tempstr = "";
            for (int i = 0; i < 64; i++) {
                charA = Character.toString(tempA.charAt(i));
                charB = Character.toString(tempB.charAt(i));
                if (charA.matches("1") && charB.matches("1")) {
                    tempstr = tempstr + '1';
                } else {
                    tempstr = tempstr + '0';
                }
            }

            ALUOUTPUT = new BigInteger(tempstr, 2).toString(16);
            ALUOUTPUT = padZeros(ALUOUTPUT, 16);

            COND = 0;
        } else if (instlist.get(index).getInst().contains("DSRLV")) {
            tempA = Integer.toBinaryString(Integer.parseInt(A, 16));
            tempA = padZeros(tempA, 64);
            tempint = Integer.parseInt(B, 16);

            tempB = tempA.substring(0, 64 - tempint);
            tempB = padZeros(tempB, 64);

            ALUOUTPUT = new BigInteger(tempB, 2).toString(16);
            ALUOUTPUT = padZeros(ALUOUTPUT, 16);

            COND = 0;
        } else if (instlist.get(index).getInst().contains("SLT")) {
            
            COND = 0;
        } else if (instlist.get(index).getInst().contains("BEQ")) {
            tempint = Integer.parseInt(instlist.get(index).getIF().getNPC(), 16) + (Integer.parseInt(IMM, 16) * 4);

            ALUOUTPUT = Integer.toHexString(tempint);
            ALUOUTPUT = padZeros(ALUOUTPUT, 16);

            if (A.matches(B)) {
                COND = 1;
            } else {
                COND = 0;
            }
        } else if (instlist.get(index).getInst().contains("LWU")
                || instlist.get(index).getInst().contains("SW")
                || instlist.get(index).getInst().contains("LW")) {
            intvalue = Integer.parseInt(instlist.get(index).getID().getA(), 16) + Integer.parseInt(instlist.get(index).getID().getIMM(), 16);
            ALUOUTPUT = Integer.toHexString(intvalue);
            ALUOUTPUT = padZeros(ALUOUTPUT, 16);

            COND = 0;
        } else if (instlist.get(index).getInst().contains("DADDIU")) {
            intvalue = Integer.parseInt(instlist.get(index).getID().getA(), 16) + Integer.parseInt(instlist.get(index).getID().getIMM(), 16);
            ALUOUTPUT = Integer.toHexString(intvalue);
            ALUOUTPUT = padZeros(ALUOUTPUT, 16);

            COND = 0;
        } else if (instlist.get(index).getInst().contains("ORI")) {
            tempA = Integer.toBinaryString(Integer.parseInt(A, 16));
            tempB = Integer.toBinaryString(Integer.parseInt(IMM, 16));
            tempA = padZeros(tempA, 64);
            tempB = padZeros(tempB, 64);

            tempstr = "";
            for (int i = 0; i < 64; i++) {
                charA = Character.toString(tempA.charAt(i));
                charB = Character.toString(tempB.charAt(i));
                if (charA.matches("0") && charB.matches("0")) {
                    tempstr = tempstr + '0';
                } else {
                    tempstr = tempstr + '1';
                }
            }

            ALUOUTPUT = new BigInteger(tempstr, 2).toString(16);
            ALUOUTPUT = padZeros(ALUOUTPUT, 16);

            COND = 0;
        } else if (instlist.get(index).getInst().contains("J")) {
            ALUOUTPUT = Integer.toHexString(Integer.parseInt(IMM, 16) * 4);
            ALUOUTPUT = padZeros(ALUOUTPUT, 16);

            COND = 1;
        }

        instlist.get(index).setEX(IR, ALUOUTPUT, B, COND);

        //MEM
        IR = instlist.get(index).getOpcode();

        if (instlist.get(index).getInst().contains("DSUBU")
                || instlist.get(index).getInst().contains("DDIV")
                || instlist.get(index).getInst().contains("AND")
                || instlist.get(index).getInst().contains("DSRLV")
                || instlist.get(index).getInst().contains("SLT")
                || instlist.get(index).getInst().contains("DADDIU")
                || instlist.get(index).getInst().contains("ORI")) {
            ALUOUTPUT = instlist.get(index).getEX().getALUOUTPUT();
            
            LMD = "N/A";
            MEMALU = "N/A";
        } else if (instlist.get(index).getInst().contains("LW")) {
            //LMD
            
            ALUOUTPUT = "N/A";
            MEMALU = "N/A";            
        } else if (instlist.get(index).getInst().contains("LWU")) {
            //LMD
            
            ALUOUTPUT = "N/A";
            MEMALU = "N/A";
        } else if (instlist.get(index).getInst().contains("SW")) {
            //MEMALU
            
            LMD = "N/A";
            ALUOUTPUT = "N/A";
        } else if(instlist.get(index).getInst().contains("BEQ")
                || instlist.get(index).getInst().contains("J")) {
            
            LMD = "N/A";
            ALUOUTPUT = instlist.get(index).getEX().getALUOUTPUT();
            MEMALU = "N/A";
        }

        instlist.get(index).setMEM(IR, ALUOUTPUT, LMD, MEMALU);

        //WB
        tempstr = instlist.get(index).getAnswer().substring(1);
        
        if(tempstr.contains("one")) {
            REG = "N/A";
            instlist.get(index).setWB(REG);
        } else {
            tempint = Integer.parseInt(tempstr);
            
            if(instlist.get(index).getInst().contains("LW")
                || instlist.get(index).getInst().contains("LWU")) {
                setRegister(tempint, Integer.parseInt(LMD, 16));
                instlist.get(index).setWB(LMD);
            } else {
                setRegister(tempint, Integer.parseInt(ALUOUTPUT, 16));
                instlist.get(index).setWB(ALUOUTPUT);
                
                tempstr = Integer.toHexString(hi);
                tempstr = padZeros(tempstr, 16).toUpperCase();
                jTextField37.setText(tempstr);
                tempstr = Integer.toHexString(lo);
                tempstr = padZeros(tempstr, 16).toUpperCase();
                jTextField38.setText(tempstr);
            }
        }
    }

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        jButton4.setEnabled(false);
        String label;
        int cmpR1, cmpR2, startsat = 0;
        int depCheck = -1, j = 0;

        ArrayList<Integer> endlist = new ArrayList<Integer>();
        for (int i = 0; i < instlist.size(); i++) {
            depCheck = -1;

            if (instlist.get(i).getInst().contains("DSUBU") || instlist.get(i).getInst().contains("DDIV") || instlist.get(i).getInst().contains("AND")
                    || instlist.get(i).getInst().contains("DSRLV") || instlist.get(i).getInst().contains("SLT") || instlist.get(i).getInst().contains("LW")
                    || instlist.get(i).getInst().contains("LWU") || instlist.get(i).getInst().contains("SW") || instlist.get(i).getInst().contains("DADDIU")
                    || instlist.get(i).getInst().contains("ORI")) {
                if (i == 0) {
                    addCycle(i + 1, startsat);
                    endlist.add(startsat + 4);
                    startsat++;
                } else {
                    for (j = 0; j < i; j++) {
                        if (instlist.get(i).getDependency().contains(instlist.get(j).getAnswer())) {
                            depCheck = j;
                        }
                    }
                    if (depCheck == -1) {
                        addCycle(i + 1, startsat);
                        endlist.add(startsat + 4);
                        startsat++;
                    } else {
                        addIf(i + 1, startsat);
                        startsat++;
                        addStall(i + 1, startsat, endlist.get(depCheck) - startsat); //endlist.get(j)-startsat;
                        startsat = startsat + (endlist.get(depCheck) - startsat) + 1;
                        addCont(i + 1, startsat);
                        endlist.add(startsat + 3);
                    }
                }
            } else if (instlist.get(i).getInst().contains("BEQ")) {
                //inst = "BEQ";

                for (j = 0; j < i; j++) {
                    if (instlist.get(i).getDependency().contains(instlist.get(j).getAnswer())) {
                        depCheck = j;
                    }
                }
                if (depCheck == -1) {
                    addCycle(i + 1, startsat);
                    endlist.add(startsat + 4);
                    startsat++;
                } else {
                    addIf(i + 1, startsat);
                    startsat++;
                    addStall(i + 1, startsat, endlist.get(depCheck) - startsat); //endlist.get(j)-startsat;
                    startsat = startsat + (endlist.get(depCheck) - startsat) + 1;
                    addCont(i + 1, startsat);
                    endlist.add(startsat + 3);
                }

                cmpR1 = Integer.parseInt(instlist.get(i).getInst().substring(5, instlist.get(i).getInst().indexOf(",")));
                cmpR2 = Integer.parseInt(instlist.get(i).getInst().substring(instlist.get(i).getInst().lastIndexOf(", R") + 3, instlist.get(i).getInst().lastIndexOf(", ")));
                cmpR1 = checkRegister(cmpR1);
                cmpR2 = checkRegister(cmpR2);

                if (cmpR1 != cmpR2) {
                } else {
                    label = instlist.get(i).getInst().substring(instlist.get(i).getInst().lastIndexOf(", ") + 2);

                    i++;
                    addIf(i + 1, startsat);
                    endlist.add(startsat);

                    for (j = i; j < instlist.size(); j++) {
                        if (label.matches(instlist.get(j).getLabel())) {
                            i = j - 1;
                            break;
                        }
                    }

                    for (int k = 0; k < j; k++) {
                        endlist.add(startsat);
                    }
                    startsat++;
                }
            } else if (instlist.get(i).getLabel().contains("J")) {
                addCycle(i + 1, startsat);
                endlist.add(startsat + 4);
                startsat++;

                label = instlist.get(i).getLabel().substring(instlist.get(i).getLabel().indexOf(" ") + 1);

                i++;
                addIf(i + 1, startsat);
                endlist.add(startsat);

                for (j = i; j < instlist.size(); j++) {
                    if (label.matches(instlist.get(j).getLabel())) {
                        i = j - 1;
                        break;
                    }
                }
                for (int k = 0; k < j; k++) {
                    endlist.add(startsat);
                }
                startsat++;
            }
            addIFtoWB(i);
        }

        //display pipeline map
        pipelinemodel.setColumnCount(cyclelist.size() + 1);
        pipelinemodel.fireTableStructureChanged();

        JTableHeader th = jTable4.getTableHeader();
        TableColumnModel tcm = th.getColumnModel();
        TableColumn tc = tcm.getColumn(0);
        tc.setHeaderValue("Instruction");

        for (int i = 1; i <= cyclelist.size(); i++) {
            tc = tcm.getColumn(i);
            tc.setHeaderValue("Cycle " + i);
            //jTextArea3.setText(jTextArea3.getText() + '\n' + "Cycle " + (i + 1) + ": " + cyclelist.get(i));
        }
        th.repaint();
        pipelinemodel.fireTableDataChanged();

        for (int i = 0; i < instlist.size(); i++) {
            Object[] obj = {instlist.get(i).getInst().toString()};
            pipelinemodel.addRow(obj);
        }

        int start, last, index;
        String data = "";
        for (j = 0; j < instlist.size(); j++) {
            index = j + 1;
            for (int i = 0; i < cyclelist.size(); i++) {
                if (cyclelist.get(i).contains("Inst" + index)) {
                    start = cyclelist.get(i).indexOf(String.valueOf(index)) + 2;
                    last = cyclelist.get(i).indexOf(",", start);
                    if (last == -1) {
                        data = cyclelist.get(i).substring(start);
                    } else {
                        data = cyclelist.get(i).substring(start, last);
                    }
                    pipelinemodel.setValueAt(data, j, i + 1); //row, column
                }
            }
        }
        pipelinemodel.fireTableDataChanged();
    }//GEN-LAST:event_jButton4ActionPerformed

    private String IntToHex(int r) {
        String tempReg = Integer.toHexString(r);
        tempReg = padZeros(tempReg, 16);
        return tempReg;
    }

    private void jTextField6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField6MouseClicked
        // TODO add your handling code here:
        String tempR1 = IntToHex(r1).toUpperCase();
        tempR1 = JOptionPane.showInputDialog("Enter R1", tempR1);
        m = immediate.matcher(tempR1);
        if (tempR1.matches("") || tempR1.length() > 16 || m.find()) { //error checking
            System.out.println("here");
        } else {
            setRegister(1, Integer.parseInt(tempR1, 16));
        }
    }//GEN-LAST:event_jTextField6MouseClicked

    private void jTextField7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField7MouseClicked
        // TODO add your handling code here:
        String tempR2 = IntToHex(r2).toUpperCase();
        tempR2 = JOptionPane.showInputDialog("Enter R2", tempR2);
        m = immediate.matcher(tempR2);
        if (tempR2.matches("") || tempR2.length() > 16 || m.find()) {

        } else {
            setRegister(2, Integer.parseInt(tempR2, 16));
        }
    }//GEN-LAST:event_jTextField7MouseClicked

    private void jTextField8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField8MouseClicked
        // TODO add your handling code here:
        String tempR3 = IntToHex(r3).toUpperCase();
        tempR3 = JOptionPane.showInputDialog("Enter R3", tempR3);
        m = immediate.matcher(tempR3);
        if (tempR3.matches("") || tempR3.length() > 16 || m.find()) {

        } else {
            setRegister(3, Integer.parseInt(tempR3, 16));
        }
    }//GEN-LAST:event_jTextField8MouseClicked

    private void jTextField9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField9MouseClicked
        // TODO add your handling code here:
        String tempR4 = IntToHex(r4).toUpperCase();
        tempR4 = JOptionPane.showInputDialog("Enter R4", tempR4);
        m = immediate.matcher(tempR4);
        if (tempR4.matches("") || tempR4.length() > 16 || m.find()) {

        } else {
            setRegister(4, Integer.parseInt(tempR4, 16));
        }
    }//GEN-LAST:event_jTextField9MouseClicked

    private void jTextField10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField10MouseClicked
        // TODO add your handling code here:
        String tempR5 = IntToHex(r5).toUpperCase();
        tempR5 = JOptionPane.showInputDialog("Enter R5", tempR5);
        m = immediate.matcher(tempR5);
        if (tempR5.matches("") || tempR5.length() > 16 || m.find()) {

        } else {
            setRegister(5, Integer.parseInt(tempR5, 16));
        }
    }//GEN-LAST:event_jTextField10MouseClicked

    private void jTextField11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField11MouseClicked
        // TODO add your handling code here:
        String tempR6 = IntToHex(r6).toUpperCase();
        tempR6 = JOptionPane.showInputDialog("Enter R6", tempR6);
        m = immediate.matcher(tempR6);
        if (tempR6.matches("") || tempR6.length() > 16 || m.find()) {

        } else {
            setRegister(6, Integer.parseInt(tempR6, 16));
        }
    }//GEN-LAST:event_jTextField11MouseClicked

    private void jTextField12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField12MouseClicked
        // TODO add your handling code here:
        String tempR7 = IntToHex(r7).toUpperCase();
        tempR7 = JOptionPane.showInputDialog("Enter R7", tempR7);
        m = immediate.matcher(tempR7);
        if (tempR7.matches("") || tempR7.length() > 16 || m.find()) {

        } else {
            setRegister(7, Integer.parseInt(tempR7, 16));
        }
    }//GEN-LAST:event_jTextField12MouseClicked

    private void jTextField13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField13MouseClicked
        // TODO add your handling code here:
        String tempR8 = IntToHex(r8).toUpperCase();
        tempR8 = JOptionPane.showInputDialog("Enter R8", tempR8);
        m = immediate.matcher(tempR8);
        if (tempR8.matches("") || tempR8.length() > 16 || m.find()) {

        } else {
            r8 = Integer.parseInt(tempR8, 16);
            tempR8 = IntToHex(r8);
            tempR8 = tempR8.toUpperCase();
            jTextField13.setText(tempR8);
        }
    }//GEN-LAST:event_jTextField13MouseClicked

    private void jTextField14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField14MouseClicked
        // TODO add your handling code here:
        String tempR9 = IntToHex(r9).toUpperCase();
        tempR9 = JOptionPane.showInputDialog("Enter R9", tempR9);
        m = immediate.matcher(tempR9);
        if (tempR9.matches("") || tempR9.length() > 16 || m.find()) {

        } else {
            setRegister(9, Integer.parseInt(tempR9, 16));
        }
    }//GEN-LAST:event_jTextField14MouseClicked

    private void jTextField15MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField15MouseClicked
        // TODO add your handling code here:
        String tempR10 = IntToHex(r10).toUpperCase();
        tempR10 = JOptionPane.showInputDialog("Enter R10", tempR10);
        m = immediate.matcher(tempR10);
        if (tempR10.matches("") || tempR10.length() > 16 || m.find()) {

        } else {
            setRegister(10, Integer.parseInt(tempR10, 16));
        }
    }//GEN-LAST:event_jTextField15MouseClicked

    private void jTextField16MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField16MouseClicked
        // TODO add your handling code here:
        String tempR11 = IntToHex(r11).toUpperCase();
        tempR11 = JOptionPane.showInputDialog("Enter R11", tempR11);
        m = immediate.matcher(tempR11);
        if (tempR11.matches("") || tempR11.length() > 16 || m.equals(lo)) {

        } else {
            setRegister(11, Integer.parseInt(tempR11, 16));
        }
    }//GEN-LAST:event_jTextField16MouseClicked

    private void jTextField17MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField17MouseClicked
        // TODO add your handling code here:
        String tempR12 = IntToHex(r12).toUpperCase();
        tempR12 = JOptionPane.showInputDialog("Enter R12", tempR12);
        m = immediate.matcher(tempR12);
        if (tempR12.matches("") || tempR12.length() > 16 || m.find()) {

        } else {
            setRegister(12, Integer.parseInt(tempR12, 16));
        }
    }//GEN-LAST:event_jTextField17MouseClicked

    private void jTextField18MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField18MouseClicked
        // TODO add your handling code here:
        String tempR13 = IntToHex(r13).toUpperCase();
        tempR13 = JOptionPane.showInputDialog("Enter R13", tempR13);
        m = immediate.matcher(tempR13);
        if (tempR13.matches("") || tempR13.length() > 16 || m.find()) {

        } else {
            setRegister(13, Integer.parseInt(tempR13, 16));
        }
    }//GEN-LAST:event_jTextField18MouseClicked

    private void jTextField19MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField19MouseClicked
        // TODO add your handling code here:
        String tempR14 = IntToHex(r14).toUpperCase();
        tempR14 = JOptionPane.showInputDialog("Enter R14", tempR14);
        m = immediate.matcher(tempR14);
        if (tempR14.matches("") || tempR14.length() > 16 || m.equals(lo)) {

        } else {
            setRegister(14, Integer.parseInt(tempR14, 16));
        }
    }//GEN-LAST:event_jTextField19MouseClicked

    private void jTextField20MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField20MouseClicked
        // TODO add your handling code here:
        String tempR15 = IntToHex(r15).toUpperCase();
        tempR15 = JOptionPane.showInputDialog("Enter R15", tempR15);
        m = immediate.matcher(tempR15);
        if (tempR15.matches("") || tempR15.length() > 16 || m.find()) {

        } else {
            setRegister(15, Integer.parseInt(tempR15, 16));
        }
    }//GEN-LAST:event_jTextField20MouseClicked

    private void jTextField21MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField21MouseClicked
        // TODO add your handling code here:
        String tempR16 = IntToHex(r16).toUpperCase();
        tempR16 = JOptionPane.showInputDialog("Enter R16", tempR16);
        m = immediate.matcher(tempR16);
        if (tempR16.matches("") || tempR16.length() > 16 || m.find()) {

        } else {
            setRegister(16, Integer.parseInt(tempR16, 16));
        }
    }//GEN-LAST:event_jTextField21MouseClicked

    private void jTextField22MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField22MouseClicked
        // TODO add your handling code here:
        String tempR17 = IntToHex(r17).toUpperCase();
        tempR17 = JOptionPane.showInputDialog("Enter R17", tempR17);
        m = immediate.matcher(tempR17);
        if (tempR17.matches("") || tempR17.length() > 16 || m.find()) {

        } else {
            setRegister(17, Integer.parseInt(tempR17, 16));
        }
    }//GEN-LAST:event_jTextField22MouseClicked

    private void jTextField23MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField23MouseClicked
        // TODO add your handling code here:
        String tempR18 = IntToHex(r18).toUpperCase();
        tempR18 = JOptionPane.showInputDialog("Enter R18", tempR18);
        m = immediate.matcher(tempR18);
        if (tempR18.matches("") || tempR18.length() > 16 || m.find()) {

        } else {
            setRegister(18, Integer.parseInt(tempR18, 16));
        }
    }//GEN-LAST:event_jTextField23MouseClicked

    private void jTextField24MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField24MouseClicked
        // TODO add your handling code here:
        String tempR19 = IntToHex(r19).toUpperCase();
        tempR19 = JOptionPane.showInputDialog("Enter R19", tempR19);
        m = immediate.matcher(tempR19);
        if (tempR19.matches("") || tempR19.length() > 16 || m.find()) {

        } else {
            setRegister(19, Integer.parseInt(tempR19, 16));
        }
    }//GEN-LAST:event_jTextField24MouseClicked

    private void jTextField25MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField25MouseClicked
        // TODO add your handling code here:
        String tempR20 = IntToHex(r20).toUpperCase();
        tempR20 = JOptionPane.showInputDialog("Enter R20", tempR20);
        m = immediate.matcher(tempR20);
        if (tempR20.matches("") || tempR20.length() > 16 || m.find()) {

        } else {
            setRegister(20, Integer.parseInt(tempR20, 16));
        }
    }//GEN-LAST:event_jTextField25MouseClicked

    private void jTextField26MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField26MouseClicked
        // TODO add your handling code here:
        String tempR21 = IntToHex(r21).toUpperCase();
        tempR21 = JOptionPane.showInputDialog("Enter R21", tempR21);
        m = immediate.matcher(tempR21);
        if (tempR21.matches("") || tempR21.length() > 16 || m.find()) {

        } else {
            setRegister(21, Integer.parseInt(tempR21, 16));
        }
    }//GEN-LAST:event_jTextField26MouseClicked

    private void jTextField27MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField27MouseClicked
        // TODO add your handling code here:
        String tempR22 = IntToHex(r22).toUpperCase();
        tempR22 = JOptionPane.showInputDialog("Enter R22", tempR22);
        m = immediate.matcher(tempR22);
        if (tempR22.matches("") || tempR22.length() > 16 || m.find()) {

        } else {
            setRegister(22, Integer.parseInt(tempR22, 16));
        }
    }//GEN-LAST:event_jTextField27MouseClicked

    private void jTextField28MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField28MouseClicked
        // TODO add your handling code here:
        String tempR23 = IntToHex(r23).toUpperCase();
        tempR23 = JOptionPane.showInputDialog("Enter R23", tempR23);
        m = immediate.matcher(tempR23);
        if (tempR23.matches("") || tempR23.length() > 16 || m.find()) {

        } else {
            setRegister(23, Integer.parseInt(tempR23, 16));
        }
    }//GEN-LAST:event_jTextField28MouseClicked

    private void jTextField29MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField29MouseClicked
        // TODO add your handling code here:
        String tempR24 = IntToHex(r24).toUpperCase();
        tempR24 = JOptionPane.showInputDialog("Enter R24", tempR24);
        m = immediate.matcher(tempR24);
        if (tempR24.matches("") || tempR24.length() > 16 || m.find()) {

        } else {
            setRegister(24, Integer.parseInt(tempR24, 16));
        }
    }//GEN-LAST:event_jTextField29MouseClicked

    private void jTextField30MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField30MouseClicked
        // TODO add your handling code here:
        String tempR25 = IntToHex(r25).toUpperCase();
        tempR25 = JOptionPane.showInputDialog("Enter R25", tempR25);
        m = immediate.matcher(tempR25);
        if (tempR25.matches("") || tempR25.length() > 16 || m.find()) {

        } else {
            setRegister(25, Integer.parseInt(tempR25, 16));
        }
    }//GEN-LAST:event_jTextField30MouseClicked

    private void jTextField31MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField31MouseClicked
        // TODO add your handling code here:
        String tempR26 = IntToHex(r26).toUpperCase();
        tempR26 = JOptionPane.showInputDialog("Enter R26", tempR26);
        m = immediate.matcher(tempR26);
        if (tempR26.matches("") || tempR26.length() > 16 || m.find()) {

        } else {
            setRegister(26, Integer.parseInt(tempR26, 16));
        }
    }//GEN-LAST:event_jTextField31MouseClicked

    private void jTextField32MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField32MouseClicked
        // TODO add your handling code here:
        String tempR27 = IntToHex(r27).toUpperCase();
        tempR27 = JOptionPane.showInputDialog("Enter R27", tempR27);
        m = immediate.matcher(tempR27);
        if (tempR27.matches("") || tempR27.length() > 16 || m.find()) {

        } else {
            setRegister(27, Integer.parseInt(tempR27, 16));
        }
    }//GEN-LAST:event_jTextField32MouseClicked

    private void jTextField33MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField33MouseClicked
        // TODO add your handling code here:
        String tempR28 = IntToHex(r28).toUpperCase();
        tempR28 = JOptionPane.showInputDialog("Enter R28", tempR28);
        m = immediate.matcher(tempR28);
        if (tempR28.matches("") || tempR28.length() > 16 || m.find()) {

        } else {
            setRegister(28, Integer.parseInt(tempR28, 16));
        }
    }//GEN-LAST:event_jTextField33MouseClicked

    private void jTextField34MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField34MouseClicked
        // TODO add your handling code here:
        String tempR29 = IntToHex(r29).toUpperCase();
        tempR29 = JOptionPane.showInputDialog("Enter R29", tempR29);
        m = immediate.matcher(tempR29);
        if (tempR29.matches("") || tempR29.length() > 16 || m.find()) {

        } else {
            setRegister(29, Integer.parseInt(tempR29, 16));
        }
    }//GEN-LAST:event_jTextField34MouseClicked

    private void jTextField35MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField35MouseClicked
        // TODO add your handling code here:
        String tempR30 = IntToHex(r30).toUpperCase();
        tempR30 = JOptionPane.showInputDialog("Enter R30", tempR30);
        m = immediate.matcher(tempR30);
        if (tempR30.matches("") || tempR30.length() > 16 || m.find()) {

        } else {
            setRegister(30, Integer.parseInt(tempR30, 16));
        }
    }//GEN-LAST:event_jTextField35MouseClicked

    private void jTextField36MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField36MouseClicked
        // TODO add your handling code here:
        String tempR31 = IntToHex(r31);
        tempR31 = tempR31.toUpperCase();
        tempR31 = JOptionPane.showInputDialog("Enter R31", tempR31);
        m = immediate.matcher(tempR31);
        if (tempR31.matches("") || tempR31.length() > 16 || m.find()) {

        } else {
            setRegister(31, Integer.parseInt(tempR31, 16));
        }
    }//GEN-LAST:event_jTextField36MouseClicked

    private void jTextField37MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField37MouseClicked
        // TODO add your handling code here:
        String tempHI = IntToHex(hi).toUpperCase();
        tempHI = JOptionPane.showInputDialog("Enter HI", tempHI);
        m = immediate.matcher(tempHI);
        if (tempHI.matches("") || tempHI.length() > 16 || m.find()) {

        } else {
            hi = Integer.parseInt(tempHI, 16);
            tempHI = IntToHex(hi);
            tempHI = tempHI.toUpperCase();
            jTextField37.setText(tempHI);
        }
    }//GEN-LAST:event_jTextField37MouseClicked

    private void jTextField38MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField38MouseClicked
        // TODO add your handling code here:
        String tempLO = IntToHex(lo).toUpperCase();
        tempLO = JOptionPane.showInputDialog("Enter LO", tempLO);
        m = immediate.matcher(tempLO);
        if (tempLO.matches("") || tempLO.length() > 16 || m.find()) {

        } else {
            lo = Integer.parseInt(tempLO, 16);
            tempLO = IntToHex(lo);
            tempLO = tempLO.toUpperCase();
            jTextField38.setText(tempLO);
        }
    }//GEN-LAST:event_jTextField38MouseClicked

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        String mem = "", value = "", newval = "";
        int row = jTable1.getSelectedRow();
        mem = Integer.toHexString((row * 4) + 8192);

        //get value from arraylist data segment
        value = datasegment.get(row);
        value = padZeros(value, 8);

        newval = JOptionPane.showInputDialog(mem, value);

        m = immediate.matcher(newval);
        if (m.find() || newval.length() > 8 || newval.matches("")) {

        } else {
            newval = padZeros(newval, 8);

            //store value to arraylist data segment
            datasegment.set(row, newval);

            datasegmentmodel.getDataVector().removeAllElements();
            datasegmentmodel.fireTableDataChanged();

            //display
            for (int i = 0; i < 2048; i++) {
                newval = "";
                mem = Integer.toHexString((i * 4) + 8192);
                value = datasegment.get(i);
                newval = padZeros(value, 8);
                Object[] obj = {mem, newval};
                datasegmentmodel.addRow(obj);
            }
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTextField40KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField40KeyReleased
        // TODO add your handling code here:
        String mem = jTextField40.getText();
    }//GEN-LAST:event_jTextField40KeyReleased

    private void jTextField40FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField40FocusGained
        // TODO add your handling code here:
        jTextField40.setText("");
    }//GEN-LAST:event_jTextField40FocusGained

    private void jTextField40FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField40FocusLost
        // TODO add your handling code here:
        jTextField40.setText("Search");
    }//GEN-LAST:event_jTextField40FocusLost

    private void jTextField41KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField41KeyReleased
        // TODO add your handling code here:
        String mem = jTextField41.getText();
    }//GEN-LAST:event_jTextField41KeyReleased

    private void jTextField41FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField41FocusGained
        // TODO add your handling code here:
        jTextField41.setText("");
    }//GEN-LAST:event_jTextField41FocusGained

    private void jTextField41FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField41FocusLost
        // TODO add your handling code here:
        jTextField41.setText("Search");
    }//GEN-LAST:event_jTextField41FocusLost

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        jTextArea1.setEditable(false);
        
        //TESTING
        System.out.println("IF");
        System.out.println("IF/ID.IR    "+instlist.get(0).getIF().getIR());
        System.out.println("IF/ID.NPC   "+instlist.get(0).getIF().getNPC());
        System.out.println("IF/ID.PC    "+instlist.get(0).getIF().getPC());
        
        System.out.println("ID");
        System.out.println("ID/EX.A     "+instlist.get(0).getID().getA());
        System.out.println("ID/EX.B     "+instlist.get(0).getID().getB());
        System.out.println("ID/EX.IMM   "+instlist.get(0).getID().getIMM());
        System.out.println("ID/EX.IR    "+instlist.get(0).getID().getIR());
        
        System.out.println("EX");
        System.out.println("EX/MEM.ALUOUTPUT    "+instlist.get(0).getEX().getALUOUTPUT());
        System.out.println("EX/MEM.B            "+instlist.get(0).getEX().getB());
        System.out.println("EX/MEM.IR           "+instlist.get(0).getEX().getIR());
        System.out.println("EX/MEM.COND         "+instlist.get(0).getEX().getCOND());
                
        System.out.println("MEM");
        System.out.println("MEM/WB.ALUOUTPUT    "+instlist.get(0).getMEM().getALUOUTPUT());
        System.out.println("MEM/WB.IR           "+instlist.get(0).getMEM().getIR());
        System.out.println("MEM/WB.LMD          "+instlist.get(0).getMEM().getLMD());
        System.out.println("MEM/WB.MEMALU       "+instlist.get(0).getMEM().getMEMALU());
        
        System.out.println("WB");
        System.out.println("REG     "+instlist.get(0).getWB().getREG());
    }//GEN-LAST:event_jButton6ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox10;
    private javax.swing.JComboBox jComboBox11;
    private javax.swing.JComboBox jComboBox12;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JComboBox jComboBox4;
    private javax.swing.JComboBox jComboBox5;
    private javax.swing.JComboBox jComboBox6;
    private javax.swing.JComboBox jComboBox7;
    private javax.swing.JComboBox jComboBox8;
    private javax.swing.JComboBox jComboBox9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField15;
    private javax.swing.JTextField jTextField16;
    private javax.swing.JTextField jTextField17;
    private javax.swing.JTextField jTextField18;
    private javax.swing.JTextField jTextField19;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField20;
    private javax.swing.JTextField jTextField21;
    private javax.swing.JTextField jTextField22;
    private javax.swing.JTextField jTextField23;
    private javax.swing.JTextField jTextField24;
    private javax.swing.JTextField jTextField25;
    private javax.swing.JTextField jTextField26;
    private javax.swing.JTextField jTextField27;
    private javax.swing.JTextField jTextField28;
    private javax.swing.JTextField jTextField29;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField30;
    private javax.swing.JTextField jTextField31;
    private javax.swing.JTextField jTextField32;
    private javax.swing.JTextField jTextField33;
    private javax.swing.JTextField jTextField34;
    private javax.swing.JTextField jTextField35;
    private javax.swing.JTextField jTextField36;
    private javax.swing.JTextField jTextField37;
    private javax.swing.JTextField jTextField38;
    private javax.swing.JTextField jTextField39;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField40;
    private javax.swing.JTextField jTextField41;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    // End of variables declaration//GEN-END:variables
}
